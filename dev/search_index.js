var documenterSearchIndex = {"docs":
[{"location":"functions/","page":"Functions","title":"Functions","text":"CurrentModule = KiteModels","category":"page"},{"location":"functions/#Introduction","page":"Functions","title":"Introduction","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"Most of the functions work on a KPS3 or KPS4 object. For this, the variable s is used. Such a variable can be created with the lines:","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"using KiteModels, KitePodModels, KiteUtils\nconst s = KPS3(KCU(se()))","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"Or, if you want to use the 4 point kite model:","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"using KiteModels, KitePodModels, KiteUtils\nconst s = KPS4(KCU(se()))","category":"page"},{"location":"functions/","page":"Functions","title":"Functions","text":"Functions with an \"!\" as last character of the function name modify one of more of their parameters, in this context mostly the variable s.","category":"page"},{"location":"functions/#Input-functions","page":"Functions","title":"Input functions","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"set_v_reel_out!\nset_depower_steering!\nset_v_wind_ground!","category":"page"},{"location":"functions/#KiteModels.set_v_reel_out!","page":"Functions","title":"KiteModels.set_v_reel_out!","text":"set_v_reel_out!(s::AKM, v_reel_out, t_0, period_time = 1.0 / s.set.sample_freq)\n\nSetter for the reel-out speed. Must be called on every timestep (before each simulation). It also updates the tether length, therefore it must be called even if v_reel_out has not changed.\n\nt_0 the start time of the next timestep relative to the start of the simulation [s]\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.set_depower_steering!","page":"Functions","title":"KiteModels.set_depower_steering!","text":"set_depower_steering!(s::AKM, depower, steering)\n\nSetter for the depower and steering model inputs. \n\nParameters:\n\ndepower:   Relative depower,  must be between 0 .. 1.0\nsteering:  Relative steering, must be between -1.0 .. 1.0.  \n\nThis function sets the variables s.depower, s.steering and s.alpha_depower. \n\nIt takes the depower offset c0 and the dependency of the steering sensitivity from the depower settings into account.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.set_v_wind_ground!","page":"Functions","title":"KiteModels.set_v_wind_ground!","text":"set_v_wind_ground!(s::AKM, height, v_wind_gnd=s.set.v_wind, wind_dir=0.0)\n\nSet the vector of the wind-velocity at the height of the kite. As parameter the height, the ground wind speed [m/s] and the wind direction [radians] are needed. Must be called every at each timestep.\n\n\n\n\n\n","category":"function"},{"location":"functions/#Output-functions","page":"Functions","title":"Output functions","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"unstretched_length\ntether_length\ncalc_height\nwinch_force\nspring_forces\nlift_drag\nlift_over_drag\nv_wind_kite","category":"page"},{"location":"functions/#KiteModels.unstretched_length","page":"Functions","title":"KiteModels.unstretched_length","text":"unstretched_length(s::AKM)\n\nGetter for the unstretched tether reel-out lenght (at zero force).\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.tether_length","page":"Functions","title":"KiteModels.tether_length","text":"tether_length(s::AKM)\n\nCalculate and return the real, stretched tether lenght.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.calc_height","page":"Functions","title":"KiteModels.calc_height","text":"calc_height(s::KPS4)\n\nDetermine the height of the topmost kite particle above ground.\n\n\n\n\n\ncalc_height(s::KPS3)\n\nDetermine the height of the kite particle above ground.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.winch_force","page":"Functions","title":"KiteModels.winch_force","text":"winch_force(s::KPS4)\n\nReturn the absolute value of the force at the winch as calculated during the last timestep. \n\n\n\n\n\nwinch_force(s::KPS3)\n\nReturn the absolute value of the force at the winch as calculated during the last timestep. \n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.spring_forces","page":"Functions","title":"KiteModels.spring_forces","text":"spring_forces(s::AKM)\n\nReturn an array of the scalar spring forces of all tether segements.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.lift_drag","page":"Functions","title":"KiteModels.lift_drag","text":"lift_drag(s::AKM)\n\nReturn a tuple of the scalar lift and drag forces. \n\nExample:  \n\nlift, drag = lift_drag(s)\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.lift_over_drag","page":"Functions","title":"KiteModels.lift_over_drag","text":"lift_over_drag(s::AKM)\n\nReturn the lift-over-drag ratio.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.v_wind_kite","page":"Functions","title":"KiteModels.v_wind_kite","text":"v_wind_kite(s::AKM)\n\nReturn the vector of the wind speed at the height of the kite.\n\n\n\n\n\n","category":"function"},{"location":"functions/#High-level-simulation-interface","page":"Functions","title":"High level simulation interface","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"init_sim!\nnext_step!","category":"page"},{"location":"functions/#KiteModels.init_sim!","page":"Functions","title":"KiteModels.init_sim!","text":"init_sim!(s; t_end=1.0, stiffness_factor=0.035, prn=false)\n\nInitialises the integrator of the model.\n\nParameters:\n\ns:     an instance of an abstract kite model\nt_end: end time of the simulation; normally not needed\nstiffness_factor: factor applied to the tether stiffness during initialisation\nprn: if set to true, print the detailed solver results\n\nReturns: An instance of a DAE integrator.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.next_step!","page":"Functions","title":"KiteModels.next_step!","text":"next_step!(s::AKM, integrator; v_ro = 0.0, v_wind_gnd=s.set.v_wind, wind_dir=0.0, dt=1/s.set.sample_freq)\n\nCalculates the next simulation step.\n\nParameters:\n\ns:          an instance of an abstract kite model\nintegrator: an integrator instances as returned by the function @refinit_sim!\nv_ro:       reel out speed in m/s\nv_wind_gnd: wind speed at reference height in m/s\nwind_dir:   wind direction in radians\ndt:         time step in seconds\n\nOnly the first two parameters are required.\n\nReturns: The end time of the time step in seconds.\n\n\n\n\n\n","category":"function"},{"location":"functions/#Low-level-simulation-interface","page":"Functions","title":"Low level simulation interface","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"clear!\nfind_steady_state!\nresidual!","category":"page"},{"location":"functions/#KiteModels.clear!","page":"Functions","title":"KiteModels.clear!","text":"clear!(s::KPS4)\n\nInitialize the kite power model.\n\n\n\n\n\nclear!(s::KPS3)\n\nInitialize the kite power model.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.find_steady_state!","page":"Functions","title":"KiteModels.find_steady_state!","text":"find_steady_state!(s::KPS4; prn=false, delta = 0.0, stiffness_factor=0.035)\n\nFind an initial equilibrium, based on the inital parameters l_tether, elevation and v_reel_out.\n\n\n\n\n\nfind_steady_state!(s::KPS3, prn=false, delta = 0.0, stiffness_factor=0.035)\n\nFind an initial equilibrium, based on the inital parameters l_tether, elevation and v_reel_out.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.residual!","page":"Functions","title":"KiteModels.residual!","text":"residual!(res, yd, y::MVector{S, SimFloat}, s::KPS4, time) where S\n\nN-point tether model, four points for the kite on top:\nInputs:\nState vector y   = pos1,  pos2, ... , posn,  vel1,  vel2, . .., veln,  length, v_reel_out\nDerivative   yd  = posd1, posd2, ..., posdn, veld1, veld2, ..., veldn, lengthd, v_reel_outd\nOutput:\nResidual     res = res1, res2 = vel1-posd1,  ..., veld1-acc1, ...\n\nAdditional parameters:\ns: Struct with work variables, type KPS4\nS: The dimension of the state vector\n\nThe number of the point masses of the model N = S/6, the state of each point  is represented by two 3 element vectors.\n\n\n\n\n\nresidual!(res, yd, y::MVector{S, SimFloat}, s::KPS3, time) where S\n\nN-point tether model, one point kite at the top:\nInputs:\nState vector y   = pos1, pos2, ..., posn, vel1, vel2, ..., veln\nDerivative   yd  = vel1, vel2, ..., veln, acc1, acc2, ..., accn\nOutput:\nResidual     res = res1, res2 = pos1,  ..., vel1, ...\n\nAdditional parameters:\ns: Struct with work variables, type KPS3\nS: The dimension of the state vector\n\nThe number of the point masses of the model N = S/6, the state of each point  is represented by two 3 element vectors.\n\n\n\n\n\n","category":"function"},{"location":"functions/#Environment","page":"Functions","title":"Environment","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"calc_rho\ncalc_wind_factor","category":"page"},{"location":"functions/#KiteModels.calc_rho","page":"Functions","title":"KiteModels.calc_rho","text":"calc_rho(s::AKM, height)\n\nCalculate the air densisity as function of height.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.calc_wind_factor","page":"Functions","title":"KiteModels.calc_wind_factor","text":"calc_wind_factor(s::AKM, height, profile_law=s.set.profile_law)\n\nCalculate the relative wind speed at a given height and reference height.\n\n\n\n\n\n","category":"function"},{"location":"functions/#Helper-functions","page":"Functions","title":"Helper functions","text":"","category":"section"},{"location":"functions/","page":"Functions","title":"Functions","text":"copy_examples\ncopy_bin\ncalc_drag\ncalc_set_cl_cd!\ncalc_aero_forces!\ncalc_particle_forces!\ninitial_kite_ref_frame\ninner_loop!\nloop!\nget_particles","category":"page"},{"location":"functions/#KiteModels.copy_examples","page":"Functions","title":"KiteModels.copy_examples","text":"copy_examples()\n\nCopy the example scripts to the folder \"examples\" (it will be created if it doesn't exist).\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.copy_bin","page":"Functions","title":"KiteModels.copy_bin","text":"copy_bin()\n\nCopy the scripts createsysimage and run_julia to the folder \"bin\" (it will be created if it doesn't exist).\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.calc_drag","page":"Functions","title":"KiteModels.calc_drag","text":"calc_drag(s::KPS3, v_segment, unit_vector, rho, last_tether_drag, v_app_perp)\n\nCalculate the drag of one tether segment, result stored in parameter last_tether_drag. Return the norm of the apparent wind velocity.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.calc_set_cl_cd!","page":"Functions","title":"KiteModels.calc_set_cl_cd!","text":"calc_set_cl_cd!(s::AKM, vec_c, v_app)\n\nCalculate the lift over drag ratio as a function of the direction vector of the last tether segment, the current depower setting and the apparent wind speed. Set the calculated CL and CD values in the struct s. \n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.calc_aero_forces!","page":"Functions","title":"KiteModels.calc_aero_forces!","text":"calc_aero_forces!(s::KPS4, pos, vel, rho, alpha_depower, rel_steering)\n\nCalculates the aerodynamic forces acting on the kite particles.\n\nParameters:\n\npos:              vector of the particle positions\nvel:              vector of the particle velocities\nrho:              air density [kg/m^3]\nrel_depower:      value between  0.0 and  1.0\nalpha_depower:    depower angle [degrees]\nrel_steering:     value between -1.0 and +1.0\n\nUpdates the vector s.forces of the first parameter.\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.calc_particle_forces!","page":"Functions","title":"KiteModels.calc_particle_forces!","text":"calc_particle_forces!(s::KPS4, pos1, pos2, vel1, vel2, spring, segments, d_tether, rho, i)\n\nCalculate the drag force of the tether segment, defined by the parameters pos1, pos2, vel1 and vel2 and distribute it equally on the two particles, that are attached to the segment. The result is stored in the array s.forces. \n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.initial_kite_ref_frame","page":"Functions","title":"KiteModels.initial_kite_ref_frame","text":"initial_kite_ref_frame(vec_c, v_app)\n\nCalculate the initial orientation of the kite based on the last tether segment and the apparent wind speed.\n\nParameters:\n\nvecc: (posn-2) - (pos_n-1) n: number of particles without the three kite particles                                 that do not belong to the main thether (P1, P2 and P3).\nv_app: vector of the apparent wind speed\n\nReturns: x, y, z:  the unit vectors of the kite reference frame in the ENU reference frame\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.inner_loop!","page":"Functions","title":"KiteModels.inner_loop!","text":"inner_loop!(s::KPS4, pos, vel, v_wind_gnd, segments, d_tether)\n\nCalculate the forces, acting on all particles.\n\nOutput:\n\ns.forces\ns.v_wind_tether\n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.loop!","page":"Functions","title":"KiteModels.loop!","text":"loop!(s::KPS4, pos, vel, posd, veld)\n\nCalculate the vectors s.res1 and calculate s.res2 using loops that iterate over all tether segments. \n\n\n\n\n\n","category":"function"},{"location":"functions/#KiteModels.get_particles","page":"Functions","title":"KiteModels.get_particles","text":"get_particles(height_k, height_b, width, m_k, pos_pod= [ 75., 0., 129.90381057], vec_c=[-15., 0., -25.98076211], v_app=[10.4855, 0, -3.08324])\n\nCalculate the initial positions of the particels representing  a 4-point kite, connected to a kite control unit (KCU). \n\nParameters:\n\nheight_k: height of the kite itself, not above ground [m]\nheight_b: height of the bridle [m]\nwidth: width of the kite [m]\nmk: relative nose distance\npos_pod: position of the control pod\nvec_c: vector of the last tether segment\n\n\n\n\n\n","category":"function"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"CurrentModule = KiteModels","category":"page"},{"location":"quickstart/#Quickstart","page":"Quickstart","title":"Quickstart","text":"","category":"section"},{"location":"quickstart/#Installation-of-Julia","page":"Quickstart","title":"Installation of Julia","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"For a quick test of this program it is NOT needed to install vscode, git or bash. Just installing Julia is sufficient, and that can be done in a few minutes. On Linux, just execute the command:","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"bash -ci \"$(curl -fsSL https://raw.githubusercontent.com/abelsiqueira/jill/master/jill.sh)\"","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"On Windows you can get Julia from the Windows store, or you download and install it from https://julialang.org/downloads/ . For Mac there are also different versions available on this download site. You do NOT need administrator permissions to install Julia, but make sure to check the option \"add to path\" when installing.","category":"page"},{"location":"quickstart/#Create-a-test-project","page":"Quickstart","title":"Create a test project","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Launch a command prompt and create a folder with the name \"test\":","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"mkdir test\ncd test\njulia --project=\".\"","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"With the last command we told julia to create a new project in the current directory.","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Then we add the three required packages to our new project. By pressing the key \"]\" we enter the package manager mode where we can add or delete packages.","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"]\nadd KiteUtils\nadd KitePodModels\nadd KiteModels\nadd Plots\nst\n<BACKSPACE>","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"The command \"st\" was not really required, but it is useful to display which versions of the packages we have in our project. Another important package manager command is the command \"up\", which updates all packages to the latest compatible versions.","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Then, copy the default configuration files and examples to your new project:","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"using KiteModels\ncopy_settings()\ncopy_examples()","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"The first command copies the files settings.yaml and system.yaml to the folder data. They can be customized later. The second command creates an examples folder with some examples.","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Your folder structure should now look like this:","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"shell> tree\n.\n├── data\n│   ├── settings.yaml\n│   └── system.yaml\n├── examples\n│   ├── compare_kps3_kps4.jl\n│   ├── plot2d.jl\n│   └── simulate.jl\n├── Manifest.toml\n└── Project.toml\n\n2 directories, 7 files","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"You can access the operating system command line by typing the character \";\", you then get a \"shell\" prompt and can enter operating system commands. To leave shell mode, type \\<BACKSLASH\\>.  On windows you need to type tree /f instead of tree to see the files.","category":"page"},{"location":"quickstart/#Executing-the-first-example","page":"Quickstart","title":"Executing the first example","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"From the Julia prompt you can use the command \"include\" to execute a script:","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"include(\"examples/simulate.jl\")","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"On Windows you need to type \"\\\\\" instead of \"/\":","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"include(\"examples\\\\simulate.jl\")","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"You will see the 4 point kite fly for 30s. If you want to change the settings of the simulation, open the file \"simulate.jl\" in your favourite text editor, modify the settings at the beginning of the file and execute the include command again. You can use the <TAB> key for autocompletion, for example include(\"ex<TAB> completes to include(\"examples\\ which can save a lot of typing. If you type <TAB> again you get a list of files to choose from.","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Try out changing the following default settings:","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"dt = 0.05\nSTEPS = 600\nPLOT = true\nFRONT_VIEW = false\nZOOM = true\nPRINT = false\nSTATISTIC = false","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Now you can quit julia with the command exit(). If you want to launch julia again, be sure to be in the correct folder and then type julia --project. Without the parameter --project it will not load your project settings.","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"The first run of the script will be slow because Julia must compile the code. The second and any further run is very fast, but only as long as you do not leave your Julia session.","category":"page"},{"location":"quickstart/#Comparing-the-one-point-and-the-four-point-kite-model","page":"Quickstart","title":"Comparing the one point and the four point kite model","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Start Julia in the project folder you created before:","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"cd test\njulia --project","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"and then execute the command","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"using KiteModels\ninclude(\"examples/compare_kps3_kps4.jl\")","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Use the command include(\"examples\\\\compare_kps3_kps4.jl\") on Windows.","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"The last view of the animation should look like this:","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"(Image: Initial State)","category":"page"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"You can save what you see with the command savefig(\"kite.png\").","category":"page"},{"location":"quickstart/#Exercise","page":"Quickstart","title":"Exercise","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"Modify the variable ALPHA_ZERO in line 11 of the script until the lift force of the 1 point model and the 4 point model match.","category":"page"},{"location":"quickstart/#Questions?","page":"Quickstart","title":"Questions?","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"If you have any questions, please ask in the Julia Discourse forum in the section modelling and simulation , or in in the section First steps . The Julia community is very friendly and responsive.","category":"page"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"CurrentModule = KiteModels","category":"page"},{"location":"examples/#Examples-for-using-the-one-point-kite-model","page":"Examples_1p","title":"Examples for using the one point kite model","text":"","category":"section"},{"location":"examples/#Create-a-test-project","page":"Examples_1p","title":"Create a test project","text":"","category":"section"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"mkdir test\ncd test\njulia --project=\".\"","category":"page"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"With the last command we told julia to create a new project in the current directory.","category":"page"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"Then we add the three required packages to our new project. By pressing the key \"]\" we enter the package manager mode where we can add or delete packages.","category":"page"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"]\nadd KiteUtils\nadd KitePodModels\nadd KiteModels\nst\n<BACKSPACE>","category":"page"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"The command \"st\" was not really required, but it is useful to display which versions of the packages we have in our project. Another important package manager command is the command \"up\", which updates all packages to the latest compatible versions.","category":"page"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"Then, copy the default configuration files and examples to your new project:","category":"page"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"using KiteModels\ncopy_settings()\ncopy_examples()","category":"page"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"The first command copies the files settings.yaml and system.yaml to the folder data. They can be customized later. The second command creates an examples folder with some examples.","category":"page"},{"location":"examples/#Plotting-the-initial-state","page":"Examples_1p","title":"Plotting the initial state","text":"","category":"section"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"First an instance of the model of the kite control unit (KCU) is created which is needed by the Kite Power System model KPS3. Then we create a kps instance, passing the kcu model as parameter. We need to declare these variables as const to achieve a decent performance.","category":"page"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"using KiteModels\nconst kcu = KCU(se())\nconst kps = KPS3(kcu)","category":"page"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"Then we call the function findsteadystate which uses a non-linear solver to find the solution for a given elevation angle, reel-out speed and wind speed. ","category":"page"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"find_steady_state!(kps, prn=true)","category":"page"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"To plot the result in 2D we extract the vectors of the x and z coordinates of the tether particles with a for loop:","category":"page"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"x = Float64[] \nz = Float64[]\nfor i in 1:length(kps.pos)\n     push!(x, kps.pos[i][1])\n     push!(z, kps.pos[i][3])\nend","category":"page"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"And finally we plot the postion of the particles in the x-z plane. When you type using Plots you will be ask if you want to install the Plots package. Just press \\<ENTER\\> and it gets installed.","category":"page"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"using Plots\nplot(x,z, xlabel=\"x [m]\", ylabel=\"z [m]\", legend=false)\nplot!(x, z, seriestype = :scatter)","category":"page"},{"location":"examples/#Inital-State","page":"Examples_1p","title":"Inital State","text":"","category":"section"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"(Image: Initial State)","category":"page"},{"location":"examples/#Print-other-model-outputs","page":"Examples_1p","title":"Print other model outputs","text":"","category":"section"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"Print the vector of the positions of the particles:","category":"page"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"julia> kps.pos\n7-element StaticArrays.SVector{7, StaticArrays.MVector{3, Float64}} with indices SOneTo(7):\n [0.0, 0.0, 0.0]\n [26.95751778658999, 0.0, 59.59749511924355]\n [51.97088814144287, 0.0, 120.03746888266994]\n [75.01423773175357, 0.0, 181.25637381120865]\n [96.06809940556136, 0.0, 243.18841293054678]\n [115.11959241520753, 0.0, 305.7661763854397]\n [132.79571663189674, 0.0, 368.74701279158705]\n","category":"page"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"Print the unstretched and stretched tether length and the height of the kite:","category":"page"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"julia> unstretched_length(kps)\n392.0\n\njulia> tether_length(kps)\n392.4751313610764\n\njulia> calc_height(kps)\n368.74701279158705","category":"page"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"Print the force at the winch (groundstation, in Newton) and at each tether segment:","category":"page"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"julia> winch_force(kps)\n728.5569144505084\n\njulia> spring_forces(kps)\n6-element Vector{Float64}:\n 728.4835079763607\n 734.9505623866943\n 741.505320143339\n 748.1408238767988\n 754.8499002675924\n 761.6993164647175","category":"page"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"The force increases when going upwards because the kite not only experiances the winch force, but in addition the weight of the tether.","category":"page"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"Print the lift and drag forces of the kite (in Newton) and the lift over drag ratio:","category":"page"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"julia> lift, drag = lift_drag(kps)\n(888.5715658243445, 188.25229350390242)\n\njulia> lift_over_drag(kps)\n4.720110173881757","category":"page"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"Print the wind speed vector at the kite:","category":"page"},{"location":"examples/","page":"Examples_1p","title":"Examples_1p","text":"julia> v_wind_kite(kps)\n3-element StaticArrays.MVector{3, Float64} with indices SOneTo(3):\n  13.308227860928211\n  0.0\n  0.0","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"CurrentModule = KiteModels","category":"page"},{"location":"advanced/#Advanced-usage","page":"Advanced usage","title":"Advanced usage","text":"","category":"section"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"For advanced users it is suggested to install git, bash and vscode or vscodium in addition to Julia. vscode and vscodium both have a very good plugin for Julia support, see https://www.julia-vscode.org. For Windows users, you can find some installation instructions here: Julia on Windows .","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"Whe using vscode, I do NOT use the Julia terminal provided by vscode, but the normal bash terminal. From this terminal I start Julia with julia --project or a different command as explained below. This makes it easier to understand what happens and is also faster when you need to restart.","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"For Ubuntu Linux I use the following ppa to install vscode and to keep it up-to-date: https://www.ubuntuupdates.org/ppa/vscode .","category":"page"},{"location":"advanced/#Creating-a-custom-system-image","page":"Advanced usage","title":"Creating a custom system image","text":"","category":"section"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"To reduce the startup time it is suggested to use a custom system image that contains all the packages you use on a daily base in compiled form.","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"From a bash prompt you can create one using the following commands, assuming you created a folder \"test\" as explained on the Quickstart page:","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"cd test\njulia --project","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"using KiteModels\ncopy_bin()","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"If you enter shell mode by pressing \";\" you should see the following files:","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"shell> tree\n.\n├── bin\n│   ├── create_sys_image\n│   └── run_julia\n├── data\n│   ├── settings.yaml\n│   └── system.yaml\n├── examples\n│   ├── compare_kps3_kps4.jl\n│   ├── plot2d.jl\n│   └── simulate.jl\n├── Manifest.toml\n└── Project.toml\n\n2 directories, 7 files","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"Now leave Julia with the command exit() and then type:","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"./create_sys_image --update","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"This will take about 6 min on a  i7-10510U CPU. You should now see a new file in the bin folder:","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"~/repos/test/bin$ ls -lah kps*\n-rwxrwxr-x 1 ufechner ufechner 344M apr 18 18:23 kps-image-1.7.so","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"You can launch julia such that it makes use of this system image with the commands:","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"cd ..\n./bin/run_julia","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"If you now run any of the examples the time-to-first-plot (TTFP) should be less than 1s:","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"julia> @time include(\"examples/simulate.jl\")\nlift, drag  [N]: 690.54, 136.91\nAverage number of callbacks per time step: 744.8983333333333\n  4.566270 seconds (9.83 M allocations: 843.155 MiB, 5.78% gc time, 20.95% compilation time)\n\njulia> ","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"A second run of this command needs about 3.5 s which means the startup time (load and compilation time of the libraries) has been reduced to about 1s.","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"Without a system image the first time execution of the script \"simulate.jl\" on the same computer needs about 52 seconds while the time for the second execution is the same (3.5s). So we save now about 47s of time after each restart.","category":"page"},{"location":"advanced/#Outlook","page":"Advanced usage","title":"Outlook","text":"","category":"section"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"The next steps are:","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"add the possibility to create log files of the simulation\nadd winch model\nadd controllers","category":"page"},{"location":"advanced/","page":"Advanced usage","title":"Advanced usage","text":"Because the code for this already fully exists in Python and partially in Julia these steps will be in place soon.","category":"page"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"CurrentModule = KiteModels","category":"page"},{"location":"examples_4p/#Examples-for-using-the-four-point-kite-model","page":"Examples_4p","title":"Examples for using the four point kite model","text":"","category":"section"},{"location":"examples_4p/#Create-a-test-project","page":"Examples_4p","title":"Create a test project","text":"","category":"section"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"mkdir test\ncd test\njulia --project=\".\"","category":"page"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"With the last command we told julia to create a new project in the current directory.","category":"page"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"Then we add the three required packages to our new project. By pressing the key \"]\" we enter the package manager mode where we can add or delete packages.","category":"page"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"]\nadd KiteUtils\nadd KitePodModels\nadd KiteModels\nst\n<BACKSPACE>","category":"page"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"The command \"st\" was not really required, but it is useful to display which versions of the packages we have in our project. Another important package manager command is the command \"up\", which updates all packages to the latest compatible versions.","category":"page"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"Then, copy the default configuration files and examples to your new project:","category":"page"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"using KiteModels\ncopy_settings()\ncopy_examples()","category":"page"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"The first command copies the files settings.yaml and system.yaml to the folder data. They can be customized later. The second command creates an examples folder with some examples.","category":"page"},{"location":"examples_4p/#Plotting-the-initial-state","page":"Examples_4p","title":"Plotting the initial state","text":"","category":"section"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"First an instance of the model of the kite control unit (KCU) is created which is needed by the Kite Power System model KPS3. Then we create a kps instance, passing the kcu model as parameter. We need to declare these variables as const to achieve a decent performance.","category":"page"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"using KiteModels\nconst kcu = KCU(se())\nconst kps = KPS4(kcu)","category":"page"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"Then we call the function findsteadystate which uses a non-linear solver to find the solution for a given elevation angle, reel-out speed and wind speed. ","category":"page"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"find_steady_state!(kps, prn=true)","category":"page"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"Finding the steady state of the 4 point model is difficult and it only works when we artificially reduce the stiffness by a factor of 0.035. In the function init_sim! this factor is slowly increased to 1.0.","category":"page"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"To plot the result in 2D we extract the vectors of the x and z coordinates of the tether particles with a for loop:","category":"page"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"x = Float64[] \nz = Float64[]\nfor i in 1:length(kps.pos)\n     push!(x, kps.pos[i][1])\n     push!(z, kps.pos[i][3])\nend","category":"page"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"And finally we plot the postion of the particles in the x-z plane. When you type using Plots you will be ask if you want to install the Plots package. Just press \\<ENTER\\> and it gets installed.","category":"page"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"using Plots\nplot(x,z, xlabel=\"x [m]\", ylabel=\"z [m]\", legend=false)\nplot!(x, z, seriestype = :scatter)","category":"page"},{"location":"examples_4p/#Inital-State","page":"Examples_4p","title":"Inital State","text":"","category":"section"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"(Image: Initial State)","category":"page"},{"location":"examples_4p/#Print-other-model-outputs","page":"Examples_4p","title":"Print other model outputs","text":"","category":"section"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"Print the vector of the positions of the particles:","category":"page"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"julia> kps.pos\n11-element StaticArrays.SVector{11, StaticArrays.MVector{3, Float64}} with indices SOneTo(11):\n [0.0, 0.0, 0.0]\n [27.956158502528176, 0.0, 61.20373231368065]\n [54.19504320716677, 0.0, 123.16303233303098]\n [78.43996882046399, 0.0, 185.92935677839677]\n [100.5072692264489, 0.0, 249.49394853600091]\n [120.24626566405448, 0.0, 313.81961163792636]\n [137.52679164398376, 0.0, 378.84882574376326]\n [138.4127462851352, 0.0, 383.77543513463166]\n [139.02795801127078, 0.0, 386.0060385324739]\n [138.8006044995987, 1.1208735809303805, 383.71585107239554]\n [138.8006044995987, -1.1208735809303805, 383.71585107239554]\n","category":"page"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"Print the unstretched and stretched tether length and the height of the kite:","category":"page"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"julia> unstretched_length(kps)\n392.0\n\njulia> tether_length(kps)\n403.71695082721294\n\njulia> calc_height(kps)\n386.0060385324739","category":"page"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"Because of the the stiffness_factor of 0.035 we have a longer tether-length then when using the 1 point kite model. ","category":"page"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"Print the force at the winch (groundstation, in Newton) and at each tether segment:","category":"page"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"julia> winch_force(kps)\n643.059283146209\n\njulia> spring_forces(kps)\n15-element Vector{Float64}:\n 643.0081086309667\n 642.9843324304267\n 642.9695864010523\n 642.9577694795955\n 642.9475947472262\n 642.938668170613\n 165.89618777926103\n -25.722507476161205\n  51.67720019071219\n 254.61397516808276\n 244.5988483585308\n 244.5988483585308\n 254.61397516808276\n -25.722507476161205\n 166.98431814092817","category":"page"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"Some of the forces are negative which means the segments are getting compressed. This is acceptable for the kite itself (not for the tether).","category":"page"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"Print the lift and drag forces of the kite (in Newton) and the lift over drag ratio:","category":"page"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"julia> lift, drag = lift_drag(kps)\n(616.7473148222452, 142.89285185868704)\n\njulia> lift_over_drag(kps)\n4.316152325325367","category":"page"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"Print the wind speed vector at the kite:","category":"page"},{"location":"examples_4p/","page":"Examples_4p","title":"Examples_4p","text":"julia> v_wind_kite(kps)\n3-element StaticArrays.MVector{3, Float64} with indices SOneTo(3):\n  13.310738776362681\n  0.0\n  0.0","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = KiteModels","category":"page"},{"location":"#KiteModels","page":"Home","title":"KiteModels","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for the package KiteModels.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Download Julia 1.6 or later, if you haven't already. You can add KiteModels from  Julia's package manager, by typing ","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add KiteModels","category":"page"},{"location":"","page":"Home","title":"Home","text":"at the Julia prompt.","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you are using Windows, it is suggested to install git and bash, too. This is explained for example here: Julia on Windows .","category":"page"},{"location":"#Provides","page":"Home","title":"Provides","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The type AbstractKiteModel with the implementation KPS3 and KPS4, representing the model, together with the high level simulation interface consisting of the functions init_sim! and next_step!. Other kite models can be added inside or outside of this package by implementing the non-generic methods required for an AbstractKiteModel.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Additional functions to provide inputs and outputs of the model on each time step. Per time step the residual! function is called as many times as needed to find the solution at the end of the time step. The formulas are based on basic physics and aerodynamics and can be quite simple because a differential algebraic notation is used.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Four point kite power system model)","category":"page"},{"location":"#Further-reading","page":"Home","title":"Further reading","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"These models are described in detail in Dynamic Model of a Pumping Kite Power System.","category":"page"},{"location":"#See-also","page":"Home","title":"See also","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Research Fechner for the scientic background of this code\nThe application KiteViewer\nthe package KiteUtils\nthe package KitePodModels","category":"page"},{"location":"","page":"Home","title":"Home","text":"Author: Uwe Fechner (uwe.fechner.msc@gmail.com)","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"CurrentModule = KiteModels","category":"page"},{"location":"parameters/#Configuration","page":"Parameters","title":"Configuration","text":"","category":"section"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"To configure the parameters of the kite models, edit the file data/settings.yaml , or create a copy under a different name and change the name of the active configuration in the file data/system.yaml .","category":"page"},{"location":"parameters/#Parameters","page":"Parameters","title":"Parameters","text":"","category":"section"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"The following parameters are used by this package:","category":"page"},{"location":"parameters/","page":"Parameters","title":"Parameters","text":"system:\n    sample_freq: 20        # sample frequency in Hz\n\ninitial:\n    l_tether: 392.0        # initial tether length       [m]\n    elevation: 70.7        # initial elevation angle   [deg]\n    v_reel_out: 0.0        # initial reel out speed    [m/s]\n    depower:   25.0        # initial depower settings    [%]\n\nsolver:\n    abs_tol: 0.0006        # absolute tolerance of the DAE solver [m, m/s]\n    rel_tol: 0.001         # relative tolerance of the DAE solver [-]\n    max_iter:  200         # max number of iterations of the steady-state-solver\n\nsteering:\n    c0:       0.0          # steering offset   -0.0032           [-]\n    c_s:      2.59         # steering coefficient one point model\n    c2_cor:   0.93         # correction factor one point model\n    k_ds:     1.5          # influence of the depower angle on the steering sensitivity\n\ndepower:\n    alpha_d_max:    31.0   # max depower angle                            [deg]\n    \nkite:\n    model: \"data/kite.obj\" # 3D model of the kite\n    mass:  6.2             # kite mass incl. sensor unit [kg]\n    area: 10.18            # projected kite area         [m²]\n    rel_side_area: 30.6    # relative side area           [%]\n    height: 2.23           # height of the kite           [m]\n    alpha_cl:  [-180.0, -160.0, -90.0, -20.0, -10.0,  -5.0,  0.0, 20.0, 40.0, 90.0, 160.0, 180.0]\n    cl_list:   [   0.0,    0.5,   0.0,  0.08, 0.125,  0.15,  0.2,  1.0,  1.0,  0.0,  -0.5,   0.0]\n    alpha_cd:  [-180.0, -170.0, -140.0, -90.0, -20.0, 0.0, 20.0, 90.0, 140.0, 170.0, 180.0]\n    cd_list:   [   0.5,    0.5,    0.5,   1.0,   0.2, 0.1,  0.2,  1.0,   0.5,   0.5,   0.5]\n    \nkps4:\n    width:         2.23     # width of the kite                      [m]\n    alpha_zero:    4.0      # should be 5                      [degrees]\n    alpha_ztip:   10.0      #                                  [degrees]\n    m_k:           0.2      # relative nose distance; increasing m_k increases C2 of the turn-rate law\n    rel_nose_mass: 0.47     # relative nose mass\n    rel_top_mass:  0.4      # mass of the top particle relative to the sum of top and side particles\n\nbridle:\n    d_line:    2.5         # bridle line diameter                  [mm]\n    l_bridle: 33.4         # sum of the lengths of the bridle lines [m]\n    h_bridle:  4.9         # height of bridle                       [m]\n\nkcu:\n    kcu_mass: 8.4                # mass of the kite control unit   [kg]\n\ntether:\n    d_tether:  4           # tether diameter                 [mm]\n    cd_tether: 0.958       # drag coefficient of the tether\n    damping: 473.0         # unit damping coefficient        [Ns]\n    c_spring: 614600.0     # unit spring constant coefficient [N]\n    rho_tether:  724.0     # density of Dyneema           [kg/m³]\n\nenvironment:\n    v_wind: 9.51             # wind speed at reference height          [m/s]\n    h_ref:  6.0              # reference height for the wind speed     [m]\n\n    rho_0:  1.225            # air density at the ground or zero       [kg/m³]\n    alpha:  0.08163          # exponent of the wind profile law\n    z0:     0.0002           # surface roughness                       [m]\n    profile_law: 3           # 1=EXP, 2=LOG, 3=EXPLOG","category":"page"},{"location":"types/#Exported-Types","page":"Types","title":"Exported Types","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"CurrentModule = KiteModels","category":"page"},{"location":"types/#Basic-types","page":"Types","title":"Basic types","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"SimFloat\nKVec3\nSVec3\nProfileLaw\nAbstractKiteModel\nAKM","category":"page"},{"location":"types/#KiteModels.SimFloat","page":"Types","title":"KiteModels.SimFloat","text":"const SimFloat = Float64\n\nThis type is used for all real variables, used in the Simulation. Possible alternatives: Float32, Double64, Dual Other types than Float64 or Float32 do require support of Julia types by the solver. \n\n\n\n\n\n","category":"type"},{"location":"types/#KiteModels.KVec3","page":"Types","title":"KiteModels.KVec3","text":"const KVec3    = MVector{3, SimFloat}\n\nBasic 3-dimensional vector, stack allocated, mutable.\n\n\n\n\n\n","category":"type"},{"location":"types/#KiteModels.SVec3","page":"Types","title":"KiteModels.SVec3","text":"const SVec3    = SVector{3, SimFloat}\n\nBasic 3-dimensional vector, stack allocated, immutable.\n\n\n\n\n\n","category":"type"},{"location":"types/#KiteModels.ProfileLaw","page":"Types","title":"KiteModels.ProfileLaw","text":"ProfileLaw\n\nEnumeration to describe the wind profile low that is used.\n\n\n\n\n\n","category":"type"},{"location":"types/#KiteModels.AbstractKiteModel","page":"Types","title":"KiteModels.AbstractKiteModel","text":"abstract type AbstractKiteModel\n\nAll kite models must inherit from this type. All methods that are defined on this type must work with all kite models. All exported methods must work on this type. \n\n\n\n\n\n","category":"type"},{"location":"types/#KiteModels.AKM","page":"Types","title":"KiteModels.AKM","text":"const AKM = AbstractKiteModel\n\nShort alias for the AbstractKiteModel. \n\n\n\n\n\n","category":"type"},{"location":"types/#Struct-KPS3-and-KPS4","page":"Types","title":"Struct KPS3 and KPS4","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"KPS3\nKPS4","category":"page"},{"location":"types/#KiteModels.KPS3","page":"Types","title":"KiteModels.KPS3","text":"mutable struct KPS3{S, T, P} <: AbstractKiteModel\n\nState of the kite power system. Parameters:\n\nS: Scalar type, e.g. SimFloat In the documentation mentioned as Any, but when used in this module it is always SimFloat and not Any.\nT: Vector type, e.g. MVector{3, SimFloat}\nP: number of points of the system, segments+1\n\nNormally a user of this package will not have to access any of the members of this type directly, use the input and output functions instead.\n\nset::Settings\nReference to the settings struct Default: se()\nkcu::KCU\nReference to the KCU struct (Kite Control Unit, type from the module KitePodSimulor Default: KCU()\niter::Int64\nIteration Default: 0\ncalc_cl::Any\nFunction for calculation the lift coefficent, using a spline based on the provided value pairs. Default: Spline1D((se()).alphacl, (se()).cllist)\ncalc_cd::Any\nFunction for calculation the drag coefficent, using a spline based on the provided value pairs. Default: Spline1D((se()).alphacd, (se()).cdlist)\nv_wind::Any\nwind vector at the height of the kite Default: zeros(S, 3)\nv_wind_gnd::Any\nwind vector at reference height Default: zeros(S, 3)\nv_wind_tether::Any\nwind vector used for the calculation of the tether drag Default: zeros(S, 3)\nv_apparent::Any\napparent wind vector at the kite Default: zeros(S, 3)\nv_app_perp::Any\nvector, perpendicular to vapparent; output of calcdrag Default: zeros(S, 3)\ndrag_force::Any\ndrag force of kite and bridle; output of calcaeroforces Default: zeros(S, 3)\nlift_force::Any\nlift force of the kite; output of calcaeroforces Default: zeros(S, 3)\nsteering_force::Any\nsteering force acting on the kite; output of calcaeroforces Default: zeros(S, 3)\nlast_force::Any\nDefault: zeros(S, 3)\nspring_force::Any\nspring force of the current tether segment, output of calc_res Default: zeros(S, 3)\ntotal_forces::Any\nDefault: zeros(S, 3)\nforce::Any\nsum of spring and drag forces acting on the current segment, output of calc_res Default: zeros(S, 3)\nunit_vector::Any\nunit vector in the direction of the current tether segment, output of calc_res Default: zeros(S, 3)\nav_vel::Any\naverage velocity of the current tether segment, output of calc_res Default: zeros(S, 3)\nkite_y::Any\ny-vector of the kite fixed referense frame, output of calcaeroforces Default: zeros(S, 3)\nsegment::Any\nvector representing one tether segment (p1-p2) Default: zeros(S, 3)\nlast_tether_drag::Any\nvector of the drag force of the last calculated tether segment Default: zeros(S, 3)\nvec_z::Any\nDefault: zeros(S, 3)\nres1::StaticArrays.SVector{P, StaticArrays.MVector{3, Float64}} where P\npart one of the residual, difference between pos' and vel, non-flat, mainly for unit testing Default: zeros(SVector{P, KVec3})\nres2::StaticArrays.SVector{P, StaticArrays.MVector{3, Float64}} where P\npart two of the residual, difference between vel' and acc, non-flat, mainly for unit testing Default: zeros(SVector{P, KVec3})\npos::StaticArrays.SVector{P, StaticArrays.MVector{3, Float64}} where P\nvector of the positions of the particles Default: zeros(SVector{P, KVec3})\nseg_area::Any\narea of one tether segment Default: zero(S)\nbridle_area::Any\nDefault: zero(S)\nc_spring::Any\nspring constant, depending on the length of the tether segment Default: zero(S)\nsegment_length::Any\nunstressed segment length [m] Default: 0.0\ndamping::Any\ndamping factor, depending on the length of the tether segment Default: zero(S)\nlast_v_app_norm_tether::Any\nDefault: zero(S)\nparam_cl::Any\nlift coefficient of the kite, depending on the angle of attack Default: 0.2\nparam_cd::Any\ndrag coefficient of the kite, depending on the angle of attack Default: 1.0\nv_app_norm::Any\nDefault: zero(S)\ncor_steering::Any\nDefault: zero(S)\npsi::Any\nazimuth angle in radian; inital value is zero Default: zero(S)\nbeta::Any\nelevation angle in radian; initial value about 70 degrees Default: deg2rad((se()).elevation)\nlast_alpha::Any\nDefault: 0.1\nalpha_depower::Any\nDefault: 0.0\nt_0::Any\nrelative start time of the current time interval Default: 0.0\nv_reel_out::Any\nreel out speed of the winch [m/s] Default: 0.0\nlast_v_reel_out::Any\nreel out speed during the last time step Default: 0.0\nl_tether::Any\nunstretched tether length Default: 0.0\nrho::Any\nair density at the height of the kite Default: 0.0\ndepower::Any\nDefault: 0.0\nsteering::Any\nDefault: 0.0\nstiffness_factor::Any\nfactor for the tether stiffness, used to find the steady state with a low stiffness first Default: 1.0\nlog_href_over_z0::Any\npre-calculated constant for the wind profile law calcuation Default: log((se()).h_ref / (se()).z0)\ninitial_masses::StaticArrays.MVector{P, S} where {S, P}\ninitial masses of the point masses Default: ones(P)\nmasses::StaticArrays.MVector{P, S} where {S, P}\ncurrent masses, depending on the total tether length Default: ones(P)\n\n\n\n\n\n","category":"type"},{"location":"types/#KiteModels.KPS4","page":"Types","title":"KiteModels.KPS4","text":"mutable struct KPS4{S, T, P, Q, SP} <: AbstractKiteModel\n\nState of the kite power system, using a 4 point kite model. Parameters:\n\nS: Scalar type, e.g. SimFloat In the documentation mentioned as Any, but when used in this module it is always SimFloat and not Any.\nT: Vector type, e.g. MVector{3, SimFloat}\nP: number of points of the system, segments+1\nQ: number of springs in the system, P-1\nSP: struct type, describing a spring\n\nNormally a user of this package will not have to access any of the members of this type directly, use the input and output functions instead.\n\nset::Settings\nReference to the settings struct Default: se()\nkcu::KCU\nReference to the KCU struct (Kite Control Unit, type from the module KitePodSimulor Default: KCU()\niter::Int64\nIteration Default: 0\ncalc_cl::Any\nFunction for calculation the lift coefficent, using a spline based on the provided value pairs. Default: Spline1D((se()).alphacl, (se()).cllist)\ncalc_cd::Any\nFunction for calculation the drag coefficent, using a spline based on the provided value pairs. Default: Spline1D((se()).alphacd, (se()).cdlist)\nv_wind::Any\nwind vector at the height of the kite Default: zeros(S, 3)\nv_wind_gnd::Any\nwind vector at reference height Default: zeros(S, 3)\nv_wind_tether::Any\nwind vector used for the calculation of the tether drag Default: zeros(S, 3)\nv_apparent::Any\napparent wind vector at the kite Default: zeros(S, 3)\ndrag_force::Any\ndrag force of kite and bridle; output of calcaeroforces! Default: zeros(S, 3)\nlift_force::Any\nlift force of the kite; output of calcaeroforces! Default: zeros(S, 3)\nspring_force::Any\nspring force of the current tether segment, output of calcparticleforces! Default: zeros(S, 3)\nlast_force::Any\nlast winch force Default: zeros(S, 3)\nsegment::Any\nDefault: zeros(S, 3)\nres1::StaticArrays.SVector{P, StaticArrays.MVector{3, Float64}} where P\na copy of the residual one (pos,vel) for debugging and unit tests Default: zeros(SVector{P, KVec3})\nres2::StaticArrays.SVector{P, StaticArrays.MVector{3, Float64}} where P\na copy of the residual two (vel,acc) for debugging and unit tests Default: zeros(SVector{P, KVec3})\npos::StaticArrays.SVector{P, StaticArrays.MVector{3, Float64}} where P\na copy of the actual positions as output for the user Default: zeros(SVector{P, KVec3})\nsegment_length::Any\nunstressed segment length [m] Default: 0.0\nparam_cl::Any\nlift coefficient of the kite, depending on the angle of attack Default: 0.2\nparam_cd::Any\ndrag coefficient of the kite, depending on the angle of attack Default: 1.0\npsi::Any\nazimuth angle in radian; inital value is zero Default: zero(S)\nbeta::Any\nelevation angle in radian; initial value about 70 degrees Default: deg2rad((se()).elevation)\nalpha_depower::Any\nDefault: 0.0\nt_0::Any\nrelative start time of the current time interval Default: 0.0\nv_reel_out::Any\nreel out speed of the winch Default: 0.0\nlast_v_reel_out::Any\nreel out speed at the last time step Default: 0.0\nl_tether::Any\nDefault: 0.0\nrho::Any\nair density Default: 0.0\ndepower::Any\nDefault: 0.0\nsteering::Any\nDefault: 0.0\nstiffness_factor::Any\nDefault: 1.0\nlog_href_over_z0::Any\nDefault: log((se()).h_ref / (se()).z0)\ninitial_masses::StaticArrays.MVector{P, S} where {S, P}\ninitial masses of the point masses Default: ones(P)\nmasses::StaticArrays.MVector{P, S} where {S, P}\ncurrent masses, depending on the total tether length Default: zeros(P)\nsprings::StaticArrays.MVector\nDefault: zeros(SP, Q)\nrel_vel::Any\nDefault: zeros(S, 3)\nhalf_drag_force::Any\nDefault: zeros(S, 3)\nforces::StaticArrays.SVector{P, StaticArrays.MVector{3, Float64}} where P\nDefault: zeros(SVector{P, KVec3})\n\n\n\n\n\n","category":"type"},{"location":"types/","page":"Types","title":"Types","text":"These structs store the state of the one point model and four point model. Only in unit tests it is allowed to access the members directly, otherwise use the input and output functions.","category":"page"}]
}
